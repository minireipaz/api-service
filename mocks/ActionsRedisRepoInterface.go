// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	models "minireipaz/pkg/domain/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ActionsRedisRepoInterface is an autogenerated mock type for the ActionsRedisRepoInterface type
type ActionsRedisRepoInterface struct {
	mock.Mock
}

// AcquireLock provides a mock function with given fields: key, value, expiration
func (_m *ActionsRedisRepoInterface) AcquireLock(key string, value string, expiration time.Duration) (bool, error) {
	ret := _m.Called(key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for AcquireLock")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) (bool, error)); ok {
		return rf(key, value, expiration)
	}
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) bool); ok {
		r0 = rf(key, value, expiration)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, time.Duration) error); ok {
		r1 = rf(key, value, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: newAction
func (_m *ActionsRedisRepoInterface) Create(newAction *models.RequestGoogleAction) (bool, bool, error) {
	ret := _m.Called(newAction)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(*models.RequestGoogleAction) (bool, bool, error)); ok {
		return rf(newAction)
	}
	if rf, ok := ret.Get(0).(func(*models.RequestGoogleAction) bool); ok {
		r0 = rf(newAction)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*models.RequestGoogleAction) bool); ok {
		r1 = rf(newAction)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(*models.RequestGoogleAction) error); ok {
		r2 = rf(newAction)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Remove provides a mock function with given fields: newAction
func (_m *ActionsRedisRepoInterface) Remove(newAction *models.RequestGoogleAction) bool {
	ret := _m.Called(newAction)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*models.RequestGoogleAction) bool); ok {
		r0 = rf(newAction)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemoveLock provides a mock function with given fields: key
func (_m *ActionsRedisRepoInterface) RemoveLock(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLock")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetNX provides a mock function with given fields: hashKey, actionID, expiration
func (_m *ActionsRedisRepoInterface) SetNX(hashKey string, actionID string, expiration time.Duration) (bool, error) {
	ret := _m.Called(hashKey, actionID, expiration)

	if len(ret) == 0 {
		panic("no return value specified for SetNX")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) (bool, error)); ok {
		return rf(hashKey, actionID, expiration)
	}
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) bool); ok {
		r0 = rf(hashKey, actionID, expiration)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, time.Duration) error); ok {
		r1 = rf(hashKey, actionID, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateActionGlobalUUID provides a mock function with given fields: field
func (_m *ActionsRedisRepoInterface) ValidateActionGlobalUUID(field *string) (bool, error) {
	ret := _m.Called(field)

	if len(ret) == 0 {
		panic("no return value specified for ValidateActionGlobalUUID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*string) (bool, error)); ok {
		return rf(field)
	}
	if rf, ok := ret.Get(0).(func(*string) bool); ok {
		r0 = rf(field)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*string) error); ok {
		r1 = rf(field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewActionsRedisRepoInterface creates a new instance of ActionsRedisRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActionsRedisRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActionsRedisRepoInterface {
	mock := &ActionsRedisRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

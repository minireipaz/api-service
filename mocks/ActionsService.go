// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	models "minireipaz/pkg/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// ActionsService is an autogenerated mock type for the ActionsService type
type ActionsService struct {
	mock.Mock
}

// CreateActionsGoogleSheet provides a mock function with given fields: newAction, actionUserToken
func (_m *ActionsService) CreateActionsGoogleSheet(newAction models.RequestGoogleAction, actionUserToken *string) (bool, bool, *string) {
	ret := _m.Called(newAction, actionUserToken)

	if len(ret) == 0 {
		panic("no return value specified for CreateActionsGoogleSheet")
	}

	var r0 bool
	var r1 bool
	var r2 *string
	if rf, ok := ret.Get(0).(func(models.RequestGoogleAction, *string) (bool, bool, *string)); ok {
		return rf(newAction, actionUserToken)
	}
	if rf, ok := ret.Get(0).(func(models.RequestGoogleAction, *string) bool); ok {
		r0 = rf(newAction, actionUserToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(models.RequestGoogleAction, *string) bool); ok {
		r1 = rf(newAction, actionUserToken)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(models.RequestGoogleAction, *string) *string); ok {
		r2 = rf(newAction, actionUserToken)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*string)
		}
	}

	return r0, r1, r2
}

// CreateActionsNotion provides a mock function with given fields: newAction, actionUserToken
func (_m *ActionsService) CreateActionsNotion(newAction models.RequestGoogleAction, actionUserToken *string) (bool, bool, *string) {
	ret := _m.Called(newAction, actionUserToken)

	if len(ret) == 0 {
		panic("no return value specified for CreateActionsNotion")
	}

	var r0 bool
	var r1 bool
	var r2 *string
	if rf, ok := ret.Get(0).(func(models.RequestGoogleAction, *string) (bool, bool, *string)); ok {
		return rf(newAction, actionUserToken)
	}
	if rf, ok := ret.Get(0).(func(models.RequestGoogleAction, *string) bool); ok {
		r0 = rf(newAction, actionUserToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(models.RequestGoogleAction, *string) bool); ok {
		r1 = rf(newAction, actionUserToken)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(models.RequestGoogleAction, *string) *string); ok {
		r2 = rf(newAction, actionUserToken)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*string)
		}
	}

	return r0, r1, r2
}

// NewActionsService creates a new instance of ActionsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActionsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActionsService {
	mock := &ActionsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

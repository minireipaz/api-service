// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	models "minireipaz/pkg/domain/models"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CredentialService is an autogenerated mock type for the CredentialService type
type CredentialService struct {
	mock.Mock
}

// CreateCredential provides a mock function with given fields: credentialFrontend
func (_m *CredentialService) CreateCredential(credentialFrontend *models.RequestCreateCredential) (*models.RequestExchangeCredential, error) {
	ret := _m.Called(credentialFrontend)

	if len(ret) == 0 {
		panic("no return value specified for CreateCredential")
	}

	var r0 *models.RequestExchangeCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.RequestCreateCredential) (*models.RequestExchangeCredential, error)); ok {
		return rf(credentialFrontend)
	}
	if rf, ok := ret.Get(0).(func(*models.RequestCreateCredential) *models.RequestExchangeCredential); ok {
		r0 = rf(credentialFrontend)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RequestExchangeCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.RequestCreateCredential) error); ok {
		r1 = rf(credentialFrontend)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTokenCredential provides a mock function with given fields: credentialFrontend
func (_m *CredentialService) CreateTokenCredential(credentialFrontend *models.RequestCreateCredential) (bool, *string, error) {
	ret := _m.Called(credentialFrontend)

	if len(ret) == 0 {
		panic("no return value specified for CreateTokenCredential")
	}

	var r0 bool
	var r1 *string
	var r2 error
	if rf, ok := ret.Get(0).(func(*models.RequestCreateCredential) (bool, *string, error)); ok {
		return rf(credentialFrontend)
	}
	if rf, ok := ret.Get(0).(func(*models.RequestCreateCredential) bool); ok {
		r0 = rf(credentialFrontend)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*models.RequestCreateCredential) *string); ok {
		r1 = rf(credentialFrontend)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(*models.RequestCreateCredential) error); ok {
		r2 = rf(credentialFrontend)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExchangeGoogleCredential provides a mock function with given fields: currentCredential
func (_m *CredentialService) ExchangeGoogleCredential(currentCredential *models.RequestExchangeCredential) (*string, *string, *time.Time, *models.RequestExchangeCredential, error) {
	ret := _m.Called(currentCredential)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeGoogleCredential")
	}

	var r0 *string
	var r1 *string
	var r2 *time.Time
	var r3 *models.RequestExchangeCredential
	var r4 error
	if rf, ok := ret.Get(0).(func(*models.RequestExchangeCredential) (*string, *string, *time.Time, *models.RequestExchangeCredential, error)); ok {
		return rf(currentCredential)
	}
	if rf, ok := ret.Get(0).(func(*models.RequestExchangeCredential) *string); ok {
		r0 = rf(currentCredential)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.RequestExchangeCredential) *string); ok {
		r1 = rf(currentCredential)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}

	if rf, ok := ret.Get(2).(func(*models.RequestExchangeCredential) *time.Time); ok {
		r2 = rf(currentCredential)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*time.Time)
		}
	}

	if rf, ok := ret.Get(3).(func(*models.RequestExchangeCredential) *models.RequestExchangeCredential); ok {
		r3 = rf(currentCredential)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(*models.RequestExchangeCredential)
		}
	}

	if rf, ok := ret.Get(4).(func(*models.RequestExchangeCredential) error); ok {
		r4 = rf(currentCredential)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// GetAllCredentials provides a mock function with given fields: userID
func (_m *CredentialService) GetAllCredentials(userID *string) (*models.ResponseGetCredential, bool) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCredentials")
	}

	var r0 *models.ResponseGetCredential
	var r1 bool
	if rf, ok := ret.Get(0).(func(*string) (*models.ResponseGetCredential, bool)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(*string) *models.ResponseGetCredential); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseGetCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(*string) bool); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetCredentialByID provides a mock function with given fields: userID, credentialID
func (_m *CredentialService) GetCredentialByID(userID *string, credentialID *string) *models.ResponseGetCredential {
	ret := _m.Called(userID, credentialID)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentialByID")
	}

	var r0 *models.ResponseGetCredential
	if rf, ok := ret.Get(0).(func(*string, *string) *models.ResponseGetCredential); ok {
		r0 = rf(userID, credentialID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseGetCredential)
		}
	}

	return r0
}

// TransformWorkflow provides a mock function with given fields: currenteCredential, workflow
func (_m *CredentialService) TransformWorkflow(currenteCredential *models.RequestExchangeCredential, workflow *models.Workflow) *models.Workflow {
	ret := _m.Called(currenteCredential, workflow)

	if len(ret) == 0 {
		panic("no return value specified for TransformWorkflow")
	}

	var r0 *models.Workflow
	if rf, ok := ret.Get(0).(func(*models.RequestExchangeCredential, *models.Workflow) *models.Workflow); ok {
		r0 = rf(currenteCredential, workflow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workflow)
		}
	}

	return r0
}

// NewCredentialService creates a new instance of CredentialService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCredentialService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CredentialService {
	mock := &CredentialService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	models "minireipaz/pkg/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// DashboardHTTPRepository is an autogenerated mock type for the DashboardHTTPRepository type
type DashboardHTTPRepository struct {
	mock.Mock
}

// GetLastWorkflowData provides a mock function with given fields: userID, limitCount
func (_m *DashboardHTTPRepository) GetLastWorkflowData(userID string, limitCount uint64) (models.InfoDashboard, error) {
	ret := _m.Called(userID, limitCount)

	if len(ret) == 0 {
		panic("no return value specified for GetLastWorkflowData")
	}

	var r0 models.InfoDashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint64) (models.InfoDashboard, error)); ok {
		return rf(userID, limitCount)
	}
	if rf, ok := ret.Get(0).(func(string, uint64) models.InfoDashboard); ok {
		r0 = rf(userID, limitCount)
	} else {
		r0 = ret.Get(0).(models.InfoDashboard)
	}

	if rf, ok := ret.Get(1).(func(string, uint64) error); ok {
		r1 = rf(userID, limitCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDashboardHTTPRepository creates a new instance of DashboardHTTPRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDashboardHTTPRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DashboardHTTPRepository {
	mock := &DashboardHTTPRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

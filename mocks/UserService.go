// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	models "minireipaz/pkg/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// SynUser provides a mock function with given fields: user
func (_m *UserService) SynUser(user *models.SyncUserRequest) (bool, bool) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for SynUser")
	}

	var r0 bool
	var r1 bool
	if rf, ok := ret.Get(0).(func(*models.SyncUserRequest) (bool, bool)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.SyncUserRequest) bool); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*models.SyncUserRequest) bool); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

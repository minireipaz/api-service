// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	models "minireipaz/pkg/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// WorkflowBrokerRepository is an autogenerated mock type for the WorkflowBrokerRepository type
type WorkflowBrokerRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: workflow
func (_m *WorkflowBrokerRepository) Create(workflow *models.Workflow) bool {
	ret := _m.Called(workflow)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*models.Workflow) bool); ok {
		r0 = rf(workflow)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Update provides a mock function with given fields: workflow
func (_m *WorkflowBrokerRepository) Update(workflow *models.Workflow) bool {
	ret := _m.Called(workflow)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*models.Workflow) bool); ok {
		r0 = rf(workflow)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewWorkflowBrokerRepository creates a new instance of WorkflowBrokerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkflowBrokerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkflowBrokerRepository {
	mock := &WorkflowBrokerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

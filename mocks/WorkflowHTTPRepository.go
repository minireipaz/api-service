// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	models "minireipaz/pkg/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// WorkflowHTTPRepository is an autogenerated mock type for the WorkflowHTTPRepository type
type WorkflowHTTPRepository struct {
	mock.Mock
}

// GetAllWorkflows provides a mock function with given fields: userID, limitCount
func (_m *WorkflowHTTPRepository) GetAllWorkflows(userID *string, limitCount uint64) (*models.InfoWorkflow, error) {
	ret := _m.Called(userID, limitCount)

	if len(ret) == 0 {
		panic("no return value specified for GetAllWorkflows")
	}

	var r0 *models.InfoWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, uint64) (*models.InfoWorkflow, error)); ok {
		return rf(userID, limitCount)
	}
	if rf, ok := ret.Get(0).(func(*string, uint64) *models.InfoWorkflow); ok {
		r0 = rf(userID, limitCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.InfoWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, uint64) error); ok {
		r1 = rf(userID, limitCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflowDataByID provides a mock function with given fields: userID, workflowID, limitCount
func (_m *WorkflowHTTPRepository) GetWorkflowDataByID(userID *string, workflowID *string, limitCount uint64) (*models.InfoWorkflow, error) {
	ret := _m.Called(userID, workflowID, limitCount)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowDataByID")
	}

	var r0 *models.InfoWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *string, uint64) (*models.InfoWorkflow, error)); ok {
		return rf(userID, workflowID, limitCount)
	}
	if rf, ok := ret.Get(0).(func(*string, *string, uint64) *models.InfoWorkflow); ok {
		r0 = rf(userID, workflowID, limitCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.InfoWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *string, uint64) error); ok {
		r1 = rf(userID, workflowID, limitCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWorkflowHTTPRepository creates a new instance of WorkflowHTTPRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkflowHTTPRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkflowHTTPRepository {
	mock := &WorkflowHTTPRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
